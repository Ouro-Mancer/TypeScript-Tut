Step - 1 ---> Types of Languages

    Strongly typed Languages: Basically In strongly typed languages, there are two stages in execution of code, and we can also say that these are compiled type languages .

    --------     compile      --------
     a.cpp    ------------->    a.out   ------------->  ./out
    --------     compile      --------      Run-time
                time-error                   error

    If you are doing some error or weird mistakes like converting integer to string , compiler will check it and if there are any mistakes , it will not compile and give you an error i.e "compile time error" and then you actually run the file and the errors find at run time are "Run-Time Errors". Compiler does not run your code , it just look at your code and checks if your code does follow the rules of that particular language.

        1. Examples: C++ , Rust , Java , C
        2. Benefits:-
            -> Lesser runtime Errors
            -> Stricter CodeBase
            -> Easy to catch errors at compile time


    Loosely Typed Language:  Basically In loosely typed languages, there are only one stage in execution of code, and we can also say that these are Non-compiled (interpreted ,JIT) type languages .

    It doesn't have a separate compile section to look out in your code. It does that in a single step , it compiles and run your code and so on...and all the errors are Run-time errors.

    --------         Run-time      --------
      a.js       ------------->     a.out   
    --------                       --------  


    1. Examples: Python , php , JavaScript 
        2. Benefits:-
            -> Easy to write code
            -> Low learning curve
            -> Fast to write 


--> Type-script is built on the top of JS to introduce type safety. Any JS code can be a TS code but not every Type-script code is a JS code because in TS we introduce extra syntax for Type safety.

--> TS doesn't run on the browser , to run TS code we first have to convert it into a valid JS code and then we have to run that js file.

--> TS compiler converts TS code into JS code as long as the rules of the TS compiler is being followed same as strongly typed languages.

--> When TS is compiled down to JS , you get free type checking , if there is an eror , the conversion to JS fails. 


1.  a : number = 1;   ===>  initialized as number type now you can't assign any other value in this like string, float or etc. because of number type assigned to this


2. This is similar to writing ===>     int a = 12;


3. Commands for TS file: 

    --> npm init -y ==> Initialising node package
    --> npm install -g typescript OR npm i typescript ==> Installing typescript globally or locally
    --> npx tsc --init ==> Creating ts.config.json file
    --> npx tsc -b ==> Converting index.ts to index.js


4. If needed to assign two types to a variable:

    let x: number | string = 2
    x="Mayank" 


5. There is an "any" type in typescript in which we can assign any type to a particular variable

    let z:any = 1
    z = "Mayank"
    z = true
    

6. Need to know about some things in tsconfig.json

    --> target
    --> rootDir
    --> outDir
    --> noimplicitAny
    --> removecomments


7. Interfaces --> If you have to create a very complex object so, to define its type , we create an inteface.

Examples: ====>>

    let user = {
    name: "mayank",
    age: 21,
    address: {
        street: "Rz-245",
        pincode: 110046
        }
    }

    function isLegal(user: {
        name: string,
        age: number,
        address: {
            street: string,
            pincode: number
        }
    }): boolean {

        if (user.age > 18) {
            return true;
        }
        else {
            return false;
        }
    }

    --> Interfaces are used to define custom types. In above example when the objects gets complex , you have to check or correct the code in the function itself so , rather than redeclaring or re-assignig it in function , we creates an interface which will help us to define the type for the above object.
    
    Example ===>  

        interface UserType{
        name: string,
        age: number,
        address: {
            street: string,
            pincode: number
            }
        }

        let user :UserType  = {
        name: "mayank",
        age: 21,
        address: {
            street: "Rz-245",
            pincode: 110046
            }
        }

        function isLegal(user: UserType): boolean {

            if (user.age > 18) {
                return true;
            }
            else {
                return false;
            }

        }


    --> If you want any specific property to be optional then you can use "?".
    Example ===>

            interface UserType {
            //name: "Mayank" | "lucif"   ---> you can also assign values in interface 
            name: string,
            age: number,
            address?: {       
                street: string,
                pincode: number
            }
        }

        let user2:UserType ={
            name: "string",
            age: 21,
        }

    ---> Here address is set to be an optional field so if we use "usertype" in any other variable and do not want to give the address, then it won't give you any error. And ,also here address key is set to be optional , it doesn't mean that the keys inside the address field is optional. It means either you don't define address field or if you define it, define it with all three keys .


    --> You can use an interface within another interface so that if any common logic is being repated , we can define it in one centralized place. 

    Example ===>

            interface Address {
            street: string,
            country: string,
            pincode: number,
        }

        interface UserType {
            name: string,
            age: number,
            address: Address
        }

        interface OfficeUserType {
            address: Address
        }

8. Types ==> Types is very similar to interfaces i.e, used to aggregate data together , but just have different syntax.

    Example ===>

            type Usertype = {
            name: string,
            age: number,
        }

        let user: Usertype = {
            name: "Mayank",
            age: 22,
        }


    --> Types lets you do unions and intersection. Interface does not let you do this.

    --> Intersection (&) means if you are making a new type (say I) which is an intersection of any other two types (say x and y), then the object that you will create with the type I must have all the properties that exists in type x and type y.

        Example ==> 
            type goodUser = {
            name: string,
            age: number
        }

        type badUser = {
            name: string,
            ip: boolean
        }

        type intersection = goodUser & badUser

        let intersectValue: intersection = {
            name: "Mayank",
            age: 21,
            ip: true,
        }

    --> On the other hand , Union (|) means if you are making a new type (say I) which is an union of any other two types (say x and y), then the object that you will create with the type I must either have properties of one type (either x or y) or  have all the properties that exists in type x and type y. 

    Example ==> 
        type goodUser = {
        name: string,
        age: number
    }

    type badUser = {
        name: string,
        ip: boolean
    }

    type union = goodUser | badUser

    let unionValue: union = {
        name: "Mayank",
        age: 21,
    }


9. Advanced APIS:

    a) PICK  ==> it lets you select a set of properties or values from an existing type or interface.

        Example ===>
            interface User {
            id: number,
            name: string,
            age: number,
            email: string,
            password: string,
        }

        type UpdatedUser = Pick<User, "name" | "password" | "age"> ---> "denotes which value we need to update so rather than making another interface we created a type and using pick api we picked those properties only which we nee dto chnage from the existing interface or centralised interface or data"

        function updateUser(user: UpdatedUser) {
            return user.name;
        }


    b)PARTIAL  ==>
    c)READONLY ==>
    d)RECORDS/MAP ==>
    e)EXCLUDE ==>
    f)TYPE INTERFERENCE IN ZOD ==>